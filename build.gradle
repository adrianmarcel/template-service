plugins {
    id 'java'
    id 'application'
    id 'jvm-test-suite'
    id 'jacoco'
    id 'idea'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.gorylenko.gradle-git-properties' version '2.4.0'
    id 'com.palantir.git-version' version '0.12.3'
    id 'org.flywaydb.flyway' version '6.5.1'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
}

googleJavaFormat {
    toolVersion = '1.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

ext {
    set('githubOpenfeignVersion', '11.6')
    set('githubResilience4jVersion', '2.0.2')
    set('logbookVersion', '2.13.0')
    set('restAssuredVersion', '5.3.2')
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation "io.github.openfeign:feign-micrometer:${githubOpenfeignVersion}"
    implementation "io.github.openfeign:feign-okhttp:${githubOpenfeignVersion}"
    implementation "org.zalando:logbook-spring-boot-starter:${logbookVersion}"
    implementation 'com.wavefront:wavefront-sdk-java:3.4.3'
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.postgresql:postgresql:42.3.9'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
    implementation 'org.zalando:logbook-api:2.13.0'
    implementation 'org.zalando:logbook-core:2.13.0'
    implementation 'org.zalando:logbook-okhttp:2.13.0'
    implementation 'org.zalando:logbook-spring-boot-starter:2.13.0'
    implementation 'net.javacrumbs.shedlock:shedlock-spring:2.2.0'
    implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:2.1.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'redis.clients:jedis:5.1.3'

    runtimeOnly 'org.springframework.boot:spring-boot-properties-migrator'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    configureEach {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
        exclude module: 'micrometer-tracing-bridge-otel'
    }

    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
    testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
    testIntegrationImplementation.extendsFrom testImplementation
}

testing {
    suites {
        withType(JvmTestSuite).matching { it.name in ['test', 'testIntegration'] }.configureEach {
            dependencies {
                compileOnly 'org.projectlombok:lombok'

                implementation 'org.wiremock:wiremock-standalone:3.5.4'
                implementation "io.rest-assured:json-path:${restAssuredVersion}"
                implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
                implementation "io.rest-assured:xml-path:${restAssuredVersion}"
                implementation "io.rest-assured:xml-path:${restAssuredVersion}"
                implementation 'org.assertj:assertj-core:3.25.3'
                implementation 'org.testcontainers:postgresql:1.16.3'
                implementation 'org.awaitility:awaitility:4.1.1'
                implementation 'org.mockito:mockito-inline:3.12.4'
                implementation 'org.testcontainers:junit-jupiter:1.16.0'
                implementation('org.springframework.boot:spring-boot-starter-test') { exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' }
            }
        }

        test {
            useJUnitJupiter()
        }

        testIntegration(JvmTestSuite) {
            useJUnitJupiter()
            sourceSets {
                testIntegration {
                    java {
                        compileClasspath += main.output + test.output
                        runtimeClasspath += main.output + test.output
                        srcDir file('src/testIntegration/java')
                    }
                    resources.srcDir file('src/testIntegration/resources')
                }
            }
        }
    }
}

tasks.named('startScripts') {
    it.dependsOn(tasks.named("bootJar"))
}

tasks.named('compileTestJava') {
    it.dependsOn(tasks.named("bootJar"))
}

tasks.named('test') {
    it.dependsOn(tasks.named("bootJar"))
}

tasks.named('testIntegration') {
    it.dependsOn(tasks.named("jacocoTestReport"))
}

jacocoTestReport {
    executionData test, testIntegration
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}

idea {
    module {
        testSources.from(sourceSets.testIntegration.java.srcDirs())
        testResources.from(sourceSets.testIntegration.resources.srcDirs())
        scopes.TEST.plus += [configurations.testIntegrationCompile]
    }
}

springBoot {
    mainClass.set('br.com.devtools.service.template.Application')
    buildInfo()
}

tasks.register('installGitHooks', Copy) {
    from new File(rootProject.rootDir, 'hooks/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775

    from new File(rootProject.rootDir, 'hooks/pre-push')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
}

rootProject.tasks.named('processTestIntegrationResources') {
    duplicatesStrategy = 'include'
}